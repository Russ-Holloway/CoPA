{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "ForceCode": {
            "type": "string",
            "metadata": {
                "description": "Police force code (automatically generated from resource group name)"
            },
            "defaultValue": "[split(resourceGroup().name, '-')[1]]",
            "minLength": 2,
            "maxLength": 3
        },
        "EnvironmentSuffix": {
            "type": "string",
            "metadata": {
                "description": "Environment suffix (fixed to production)"
            },
            "defaultValue": "prod",
            "allowedValues": ["prod", "dev", "test"]
        },
        "InstanceNumber": {
            "type": "string",
            "metadata": {
                "description": "Instance number (automatically set to 01)"
            },
            "defaultValue": "01",
            "minLength": 2,
            "maxLength": 2
        },
        "ResourceGroupName": {
            "type": "string",
            "metadata": {
                "description": "The name of the resource group where the resources will be deployed."
            },
            "defaultValue": "[resourceGroup().name]"
        },
        "AzureOpenAIModelName": {
            "type": "string",
            "metadata": {
                "description": "The name of the OpenAI model to deploy."
            },
            "defaultValue": "gpt-4o"
        },
        "AzureOpenAIEmbeddingName": {
            "type": "string",
            "metadata": {
                "description": "The name of the OpenAI embedding model to deploy."
            },
            "defaultValue": "text-embedding-3-small"
        },
        "SearchDataSourceName": {
            "type": "string",
            "metadata": {
                "description": "Name for the search data source"
            },
            "defaultValue": "[concat(parameters('ForceCode'), '-copa-datasource-', parameters('EnvironmentSuffix'), '-', parameters('InstanceNumber'))]"
        },
        "SearchIndexName": {
            "type": "string",
            "metadata": {
                "description": "Name for the search index"
            },
            "defaultValue": "[concat(parameters('ForceCode'), '-copa-datasource-', parameters('EnvironmentSuffix'), '-', parameters('InstanceNumber'))]"
        },
        "SearchIndexerName": {
            "type": "string",
            "metadata": {
                "description": "Name for the search indexer"
            },
            "defaultValue": "[concat(parameters('ForceCode'), '-copa-datasource-index-', parameters('EnvironmentSuffix'), '-', parameters('InstanceNumber'))]"
        },
        "CreateAzureAdAppRegistration": {
            "type": "bool",
            "metadata": {
                "description": "Whether to automatically create Azure AD App Registration for authentication"
            },
            "defaultValue": false
        },
        "AzureAdAppDisplayName": {
            "type": "string",
            "metadata": {
                "description": "Display name for the Azure AD application"
            },
            "defaultValue": "[concat('CoPA-', parameters('ForceCode'), '-', parameters('EnvironmentSuffix'))]"
        },
        "AzureAdSupportedAccountTypes": {
            "type": "string",
            "metadata": {
                "description": "Supported account types for Azure AD app registration"
            },
            "defaultValue": "AzureADMyOrg",
            "allowedValues": ["AzureADMyOrg", "AzureADMultipleOrgs", "AzureADandPersonalMicrosoftAccount"]
        },
        "AzureAdEnableImplicitFlow": {
            "type": "bool",
            "metadata": {
                "description": "Enable implicit flow for ID tokens in the Azure AD app"
            },
            "defaultValue": true
        },
        "AzureAdEnableUserRead": {
            "type": "bool",
            "metadata": {
                "description": "Grant User.Read permission to the Azure AD app"
            },
            "defaultValue": true
        },
        "AzureAdEnableGroupRead": {
            "type": "bool",
            "metadata": {
                "description": "Grant Group.Read.All permission to the Azure AD app"
            },
            "defaultValue": true
        },
        "AzureAdClientSecretDescription": {
            "type": "string",
            "metadata": {
                "description": "Description for the Azure AD app client secret"
            },
            "defaultValue": "CoPPA Application Secret"
        },
        "AzureAdClientSecretExpiry": {
            "type": "string",
            "metadata": {
                "description": "Expiry period in months for the Azure AD app client secret"
            },
            "defaultValue": "24",
            "allowedValues": ["6", "12", "24"]
        },
        "ExistingAzureAdClientId": {
            "type": "string",
            "metadata": {
                "description": "Client ID of existing Azure AD application (when not creating new)"
            },
            "defaultValue": ""
        },
        "ExistingAzureAdClientSecret": {
            "type": "securestring",
            "metadata": {
                "description": "Client secret of existing Azure AD application (when not creating new)"
            },
            "defaultValue": ""
        },
        "ExistingAzureAdTenantId": {
            "type": "string",
            "metadata": {
                "description": "Tenant ID for existing Azure AD application (when not creating new)"
            },
            "defaultValue": "[subscription().tenantId]"
        },
        "UIFeedbackEmail": {
            "type": "string",
            "metadata": {
                "description": "Email address for feedback submissions"
            },
            "defaultValue": ""
        },
        "UIFindOutMoreLink": {
            "type": "string", 
            "metadata": {
                "description": "URL for 'Find Out More' link in the UI"
            },
            "defaultValue": ""
        },
        "GitRepositoryUrl": {
            "type": "string",
            "metadata": {
                "description": "Git repository URL for automatic deployment"
            },
            "defaultValue": "https://github.com/Russ-Holloway/CoPA.git"
        },
        "GitBranch": {
            "type": "string",
            "metadata": {
                "description": "Git branch to deploy from"
            },
            "defaultValue": "main"
        },
        "EnableGitDeployment": {
            "type": "bool",
            "metadata": {
                "description": "Enable automatic Git deployment configuration"
            },
            "defaultValue": true
        },
        "AppStartupCommand": {
            "type": "string",
            "metadata": {
                "description": "Command to start the application"
            },
            "defaultValue": "python -m gunicorn app:app"
        },
        "DeploymentSource": {
            "type": "string",
            "metadata": {
                "description": "Source type for deployment (External Git, GitHub, Local Git)"
            },
            "defaultValue": "External Git"
        },
        "RepositoryType": {
            "type": "string",
            "metadata": {
                "description": "Repository access type (Public or Private)"
            },
            "defaultValue": "Public"
        }
    },
    "variables": {
        "resourceGroupHash": "[substring(uniqueString(resourceGroup().name), 0, 8)]",
        "randomSuffix": "[substring(uniqueString(resourceGroup().id, deployment().name, parameters('ForceCode'), parameters('EnvironmentSuffix'), parameters('InstanceNumber'), variables('resourceGroupHash')), 0, 5)]",
        "HostingPlanName": "[concat('asp-', parameters('ForceCode'), '-', parameters('EnvironmentSuffix'), '-', parameters('InstanceNumber'), '-', variables('randomSuffix'))]",
        "HostingPlanSku": "B3",
        "WebsiteName": "[concat('app-', parameters('ForceCode'), '-', parameters('EnvironmentSuffix'), '-', parameters('InstanceNumber'), '-', variables('randomSuffix'))]",
        "ApplicationInsightsName": "[concat('appi-', parameters('ForceCode'), '-', parameters('EnvironmentSuffix'), '-', parameters('InstanceNumber'), '-', variables('randomSuffix'))]",
        "LogAnalyticsWorkspaceName": "[concat('log-', parameters('ForceCode'), '-', parameters('EnvironmentSuffix'), '-', parameters('InstanceNumber'), '-', variables('randomSuffix'))]",
        "AzureSearchService": "[concat('srch-', parameters('ForceCode'), '-', parameters('EnvironmentSuffix'), '-', parameters('InstanceNumber'), '-', variables('randomSuffix'))]",
        "AzureOpenAIResource": "[concat('cog-', parameters('ForceCode'), '-', parameters('EnvironmentSuffix'), '-', parameters('InstanceNumber'), '-', variables('randomSuffix'))]",
        "AzureSearchSku": "standard",
        "StorageAccountName": "[concat('st', parameters('ForceCode'), parameters('EnvironmentSuffix'), parameters('InstanceNumber'), variables('randomSuffix'))]",
        "AILibraryContainerName": "ai-library",
        "WebAppLogosContainerName": "web-app-logos",
        "cosmosdb_account_name": "[concat('db-app-', parameters('ForceCode'), '-coppa-', variables('randomSuffix'))]",
        "cosmosdb_database_name": "db_conversation_history",
        "cosmosdb_container_name": "conversations",
        "roleDefinitionId": "00000000-0000-0000-0000-000000000002",
        "AzureOpenAIEmbeddingName": "[parameters('AzureOpenAIEmbeddingName')]",
        "AzureSearchDataSourceName": "[parameters('SearchDataSourceName')]",
        "AzureSearchIndexName": "[parameters('SearchIndexName')]",
        "AzureSearchIndexerName": "[parameters('SearchIndexerName')]",
        "AzureSearchSkillset1Name": "[concat(parameters('ForceCode'), '-skillset-1-', parameters('EnvironmentSuffix'))]",
        "AzureSearchSkillsetName": "[concat(parameters('ForceCode'), '-skillset-1-', parameters('EnvironmentSuffix'))]",
        "AzureSearchSemanticSearchConfig": "copa-datasource-semantic-configuration",
        "AzureAdAppDisplayName": "[parameters('AzureAdAppDisplayName')]",
        "CreateAzureAdAppRegistration": "[parameters('CreateAzureAdAppRegistration')]",
        "FinalAzureAdClientId": "[if(parameters('CreateAzureAdAppRegistration'), reference('azureAdAppRegistration').appId, parameters('ExistingAzureAdClientId'))]",
        "FinalAzureAdTenantId": "[if(parameters('CreateAzureAdAppRegistration'), subscription().tenantId, parameters('ExistingAzureAdTenantId'))]",
        "FinalAzureAdClientSecret": "[if(parameters('CreateAzureAdAppRegistration'), reference('azureAdAppRegistration').outputs.clientSecret.value, parameters('ExistingAzureAdClientSecret'))]",
        "AzureOpenAIModelDeploymentName": "policingGptDeployment",
        "AzureOpenAISystemMessage": "You are an AI assistant specialized in policing matters. Your purpose is to help police officers and staff find relevant information from the department's knowledge base to assist with their duties. Provide clear, factual information while maintaining awareness of law enforcement protocols and policies.",
        "WebAppEnableChatHistory": true,
        "WebAppUrl": "[concat('https://', variables('WebsiteName'), '.azurewebsites.net')]"
    },
    "resources": [
        {
            "condition": "[parameters('CreateAzureAdAppRegistration')]",
            "apiVersion": "2023-08-01",
            "name": "azureAdAppRegistration",
            "type": "Microsoft.Resources/deploymentScripts",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName'))]"
            ],
            "kind": "AzurePowerShell",
            "properties": {
                "azPowerShellVersion": "8.3",
                "scriptContent": "param([string]$AppDisplayName,[string]$SupportedAccountTypes,[bool]$EnableImplicitFlow,[bool]$EnableUserRead,[bool]$EnableGroupRead,[string]$ClientSecretDescription,[string]$ClientSecretExpiry,[string]$WebAppUrl,[string]$TenantId)\n\nWrite-Output \"🚀 Creating Azure AD App Registration: $AppDisplayName\"\nWrite-Output \"Web App URL: $WebAppUrl\"\nWrite-Output \"Supported Account Types: $SupportedAccountTypes\"\nWrite-Output \"\"\nWrite-Output \"🔐 INTERACTIVE CONSENT REQUIRED\"\nWrite-Output \"═══════════════════════════════════════════════════════════════\"\nWrite-Output \"This deployment needs to create an Azure AD app registration.\"\nWrite-Output \"You will be prompted to grant permissions during this process.\"\nWrite-Output \"Please complete the consent flow when prompted.\"\nWrite-Output \"═══════════════════════════════════════════════════════════════\"\nWrite-Output \"\"\n\ntry {\n    # Use Azure CLI for interactive authentication (leverages the user's current session)\n    Write-Output \"🔑 Authenticating with Azure CLI using your current session...\"\n    \n    # Get the current user's context to ensure we're using delegated permissions\n    $accountInfo = az account show | ConvertFrom-Json\n    Write-Output \"✅ Authenticated as: $($accountInfo.user.name)\"\n    Write-Output \"✅ Tenant: $($accountInfo.tenantId)\"\n    Write-Output \"✅ Using delegated permissions (your admin privileges)\"\n    Write-Output \"\"\n    \n    # Prepare redirect URIs\n    $redirectUris = @(\n        \"$WebAppUrl/.auth/login/aad/callback\",\n        \"$WebAppUrl\"\n    )\n    \n    # Set up supported account types\n    $signInAudience = switch ($SupportedAccountTypes) {\n        'AzureADMyOrg' { 'AzureADMyOrg' }\n        'AzureADMultipleOrgs' { 'AzureADMultipleOrgs' }\n        'AzureADandPersonalMicrosoftAccount' { 'AzureADandPersonalMicrosoftAccount' }\n        default { 'AzureADMyOrg' }\n    }\n    \n    Write-Output \"📝 Creating Azure AD application with Azure CLI...\"\n    Write-Output \"This uses YOUR permissions (no managed identity required)!\"\n    \n    # Create the application using Azure CLI (uses delegated permissions)\n    $appCreateArgs = @(\n        'ad', 'app', 'create',\n        '--display-name', $AppDisplayName,\n        '--sign-in-audience', $signInAudience,\n        '--web-redirect-uris', ($redirectUris -join ' '),\n        '--enable-id-token-issuance', $EnableImplicitFlow.ToString().ToLower()\n    )\n    \n    $appJson = & az @appCreateArgs\n    $app = $appJson | ConvertFrom-Json\n    \n    Write-Output \"✅ Azure AD application created with ID: $($app.appId)\"\n    \n    # Add API permissions if requested\n    if ($EnableUserRead -or $EnableGroupRead) {\n        Write-Output \"🔐 Adding Microsoft Graph API permissions...\"\n        \n        if ($EnableUserRead) {\n            Write-Output \"Adding User.Read permission...\"\n            az ad app permission add --id $app.appId --api 00000003-0000-0000-c000-000000000000 --api-permissions e1fe6dd8-ba31-4d61-89e7-88639da4683d=Scope\n        }\n        \n        if ($EnableGroupRead) {\n            Write-Output \"Adding Group.Read.All permission...\"\n            az ad app permission add --id $app.appId --api 00000003-0000-0000-c000-000000000000 --api-permissions 5f8c59db-677d-42c8-9acd-73fe7e144b4a=Scope\n        }\n        \n        Write-Output \"✅ API permissions added\"\n        Write-Output \"\"\n        Write-Output \"🚨 CONSENT PROMPT INCOMING!\"\n        Write-Output \"You will now be prompted to grant admin consent for the API permissions.\"\n        Write-Output \"Please click 'Accept' when the consent dialog appears.\"\n        Write-Output \"\"\n        \n        # Grant admin consent (this will prompt the user interactively)\n        Write-Output \"Requesting admin consent for API permissions...\"\n        try {\n            az ad app permission admin-consent --id $app.appId\n            Write-Output \"✅ Admin consent granted successfully\"\n        } catch {\n            Write-Output \"⚠️ Admin consent may need to be granted manually\"\n            Write-Output \"You can grant consent later in the Azure Portal under Enterprise Applications\"\n        }\n    }\n    \n    # Create client secret\n    Write-Output \"🔑 Creating client secret...\"\n    $secretEndDate = (Get-Date).AddMonths([int]$ClientSecretExpiry).ToString('yyyy-MM-ddTHH:mm:ssZ')\n    \n    $secretJson = az ad app credential reset --id $app.appId --display-name $ClientSecretDescription --end-date $secretEndDate\n    $secret = $secretJson | ConvertFrom-Json\n    \n    Write-Output \"✅ Client secret created\"\n    \n    # Set output values\n    $DeploymentScriptOutputs = @{}\n    $DeploymentScriptOutputs['appId'] = $app.appId\n    $DeploymentScriptOutputs['objectId'] = $app.id\n    $DeploymentScriptOutputs['clientSecret'] = $secret.password\n    $DeploymentScriptOutputs['tenantId'] = $TenantId\n    $DeploymentScriptOutputs['displayName'] = $AppDisplayName\n    $DeploymentScriptOutputs['redirectUris'] = ($redirectUris -join ', ')\n    \n    Write-Output \"\"\n    Write-Output \"🎉 Azure AD App Registration Complete!\"\n    Write-Output \"═══════════════════════════════════════════════════════════════\"\n    Write-Output \"✅ App ID: $($app.appId)\"\n    Write-Output \"✅ Display Name: $AppDisplayName\"\n    Write-Output \"✅ Redirect URIs: $($redirectUris -join ', ')\"\n    Write-Output \"✅ Client Secret: Created and secured\"\n    Write-Output \"✅ Tenant ID: $TenantId\"\n    if ($EnableUserRead -or $EnableGroupRead) {\n        Write-Output \"✅ API Permissions: Configured and consented\"\n    }\n    Write-Output \"═══════════════════════════════════════════════════════════════\"\n    Write-Output \"\"\n    \n} catch {\n    Write-Error \"Failed to create Azure AD app registration: $($_.Exception.Message)\"\n    Write-Error \"This is likely due to insufficient permissions or consent issues.\"\n    Write-Error \"Please ensure you have Global Administrator privileges.\"\n    throw\n}",
                "arguments": "[concat('-AppDisplayName \"', parameters('AzureAdAppDisplayName'), '\" -SupportedAccountTypes \"', parameters('AzureAdSupportedAccountTypes'), '\" -EnableImplicitFlow $', string(parameters('AzureAdEnableImplicitFlow')), ' -EnableUserRead $', string(parameters('AzureAdEnableUserRead')), ' -EnableGroupRead $', string(parameters('AzureAdEnableGroupRead')), ' -ClientSecretDescription \"', parameters('AzureAdClientSecretDescription'), '\" -ClientSecretExpiry \"', parameters('AzureAdClientSecretExpiry'), '\" -WebAppUrl \"https://', variables('WebsiteName'), '.azurewebsites.net\" -TenantId \"', subscription().tenantId, '\"')]",
                "supportingScriptUris": [],
                "storageAccountSettings": {
                    "storageAccountName": "[variables('StorageAccountName')]",
                    "storageAccountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName')), '2023-04-01').keys[0].value]"
                },
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D",
                "timeout": "PT30M"
            },
            "tags": {
                "displayName": "Azure AD App Registration Creation Script"
            }
        },

        {
            "condition": "[parameters('CreateAzureAdAppRegistration')]",
            "apiVersion": "2023-08-01",
            "name": "[concat('configure-azuread-auth-', uniqueString(resourceGroup().id))]",
            "type": "Microsoft.Resources/deploymentScripts",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('WebsiteName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName'))]",
                "[if(parameters('CreateAzureAdAppRegistration'), resourceId('Microsoft.Resources/deploymentScripts', 'azureAdAppRegistration'), resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName')))]"
            ],
            "kind": "AzurePowerShell",
            "properties": {
                "azPowerShellVersion": "8.3",
                "scriptContent": "param([string]$ClientId,[string]$TenantId,[string]$SubscriptionId,[string]$ResourceGroupName,[string]$WebAppName,[string]$WebAppUrl)\n\nWrite-Output \"🎯 Configuring Azure AD Authentication for pre-created app registration\"\nWrite-Output \"Client ID: $ClientId\"\nWrite-Output \"Web App URL: $WebAppUrl\"\nWrite-Output \"Tenant ID: $TenantId\"\n\ntry {\n    # Configure App Service Authentication using the pre-created Azure AD app\n    Write-Output \"Configuring App Service Authentication...\"\n    \n    $headers = @{\n        'Authorization' = \"Bearer $((Get-AzAccessToken).Token)\"\n        'Content-Type' = 'application/json'\n    }\n    \n    # Configure AuthSettingsV2 with the pre-created app details\n    $authUri = \"https://management.azure.com/subscriptions/$SubscriptionId/resourceGroups/$ResourceGroupName/providers/Microsoft.Web/sites/$WebAppName/config/authsettingsV2?api-version=2023-01-01\"\n    $authConfig = @{\n        properties = @{\n            platform = @{\n                enabled = $true\n            }\n            globalValidation = @{\n                requireAuthentication = $true\n                unauthenticatedClientAction = 'RedirectToLoginPage'\n                redirectToProvider = 'azureactivedirectory'\n            }\n            identityProviders = @{\n                azureActiveDirectory = @{\n                    enabled = $true\n                    registration = @{\n                        clientId = $ClientId\n                        clientSecretSettingName = 'AZURE_CLIENT_SECRET'\n                        openIdIssuer = \"https://sts.windows.net/$TenantId/\"\n                    }\n                    validation = @{\n                        defaultAuthorizationPolicy = @{\n                            allowedApplications = @()\n                        }\n                    }\n                }\n            }\n            login = @{\n                tokenStore = @{\n                    enabled = $true\n                }\n            }\n        }\n    }\n    \n    $authBody = $authConfig | ConvertTo-Json -Depth 10\n    Invoke-RestMethod -Uri $authUri -Method PUT -Headers $headers -Body $authBody -ErrorAction Stop\n    \n    Write-Output \"✅ App Service Authentication configured successfully\"\n    \n    # Now update the Azure AD app registration with the redirect URIs\n    Write-Output \"Updating Azure AD app registration with redirect URIs...\"\n    \n    # Get Microsoft Graph token for updating the app registration\n    try {\n        $graphTokenResponse = Invoke-RestMethod -Uri \"https://login.microsoftonline.com/$TenantId/oauth2/v2.0/token\" -Method Post -Body @{\n            client_id = $ClientId\n            scope = 'https://graph.microsoft.com/.default'\n            grant_type = 'client_credentials'\n            client_secret = $env:AZURE_CLIENT_SECRET\n        } -ContentType 'application/x-www-form-urlencoded'\n        \n        $graphToken = $graphTokenResponse.access_token\n        Write-Output \"✅ Successfully obtained Microsoft Graph token\"\n        \n        # Get the application details\n        $appsResponse = Invoke-RestMethod -Uri \"https://graph.microsoft.com/v1.0/applications?`$filter=appId eq '$ClientId'\" -Headers @{'Authorization' = \"Bearer $graphToken\"} -Method Get\n        \n        if ($appsResponse.value.Count -gt 0) {\n            $app = $appsResponse.value[0]\n            Write-Output \"Found application: $($app.displayName)\"\n            \n            # Prepare redirect URIs\n            $redirectUris = @(\n                \"$WebAppUrl/.auth/login/aad/callback\",\n                \"$WebAppUrl\"\n            )\n            \n            # Update the application with redirect URIs\n            $updateBody = @{\n                web = @{\n                    redirectUris = $redirectUris\n                    implicitGrantSettings = @{\n                        enableIdTokenIssuance = $true\n                        enableAccessTokenIssuance = $false\n                    }\n                }\n            } | ConvertTo-Json -Depth 5\n            \n            $updateResponse = Invoke-RestMethod -Uri \"https://graph.microsoft.com/v1.0/applications/$($app.id)\" -Method PATCH -Body $updateBody -Headers @{'Authorization' = \"Bearer $graphToken\"; 'Content-Type' = 'application/json'}\n            \n            Write-Output \"✅ Azure AD app registration updated with redirect URIs\"\n            Write-Output \"Redirect URIs configured:\"\n            foreach ($uri in $redirectUris) {\n                Write-Output \"  - $uri\"\n            }\n        } else {\n            Write-Output \"⚠️ Application not found, redirect URIs will need to be configured manually\"\n        }\n    } catch {\n        Write-Output \"⚠️ Could not update redirect URIs automatically: $($_.Exception.Message)\"\n        Write-Output \"Please manually add these redirect URIs to your Azure AD app registration:\"\n        Write-Output \"  - $WebAppUrl/.auth/login/aad/callback\"\n        Write-Output \"  - $WebAppUrl\"\n    }\n    \n    # Set output values\n    $DeploymentScriptOutputs = @{}\n    $DeploymentScriptOutputs['AppId'] = $ClientId\n    $DeploymentScriptOutputs['TenantId'] = $TenantId\n    $DeploymentScriptOutputs['WebAppUrl'] = $WebAppUrl\n    $DeploymentScriptOutputs['AuthenticationConfigured'] = $true\n    $DeploymentScriptOutputs['NextSteps'] = \"Azure AD Authentication configured successfully. Your CoPA application is ready to use!\"\n    \n    Write-Output \"🎉 Azure AD Authentication Configuration Complete!\"\n    Write-Output \"Your CoPA application is now secured with Azure AD authentication.\"\n    \n} catch {\n    Write-Error \"Failed to configure Azure AD authentication: $($_.Exception.Message)\"\n    throw\n}",
                "arguments": "[concat('-ClientId \"', variables('FinalAzureAdClientId'), '\" -TenantId \"', variables('FinalAzureAdTenantId'), '\" -SubscriptionId \"', subscription().subscriptionId, '\" -ResourceGroupName \"', resourceGroup().name, '\" -WebAppName \"', variables('WebsiteName'), '\" -WebAppUrl \"https://', variables('WebsiteName'), '.azurewebsites.net\"')]",
                "supportingScriptUris": [],
                "storageAccountSettings": {
                    "storageAccountName": "[variables('StorageAccountName')]",
                    "storageAccountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName')), '2023-04-01').keys[0].value]"
                },
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D",
                "timeout": "PT30M"
            },
            "tags": {
                "displayName": "Azure AD Authentication Configuration Script"
            }
        },

        {
            "apiVersion": "2023-01-01",
            "name": "[variables('HostingPlanName')]",
            "type": "Microsoft.Web/serverfarms",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "[variables('HostingPlanSku')]"
            },
            "properties": {
                "name": "[variables('HostingPlanName')]",
                "reserved": true
            },
            "kind": "linux"
        },
        {
            "apiVersion": "2023-01-01",
            "name": "[variables('WebsiteName')]",
            "type": "Microsoft.Web/sites",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('HostingPlanName'))]"
            ],
            "kind": "app,linux",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('HostingPlanName'))]",
                "siteConfig": {
                    "linuxFxVersion": "PYTHON|3.11",
                    "appCommandLine": "[parameters('AppStartupCommand')]",
                    "appSettings": [
                        {
                            "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                            "value": "[reference(resourceId('Microsoft.Insights/components', variables('ApplicationInsightsName'))).InstrumentationKey]"
                        },
                        {
                            "name": "AZURE_COSMOSDB_ACCOUNT",
                            "value": "[variables('cosmosdb_account_name')]"
                        },
                        {
                            "name": "AZURE_COSMOSDB_CONVERSATIONS_CONTAINER",
                            "value": "[variables('cosmosdb_container_name')]"
                        },
                        {
                            "name": "AZURE_COSMOSDB_DATABASE",
                            "value": "[variables('cosmosdb_database_name')]"
                        },
                        {
                            "name": "AZURE_OPENAI_EMBEDDING_NAME",
                            "value": "[parameters('AzureOpenAIEmbeddingName')]"
                        },
                        {
                            "name": "AZURE_OPENAI_KEY",
                            "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', variables('AzureOpenAIResource')), '2023-05-01').key1]"
                        },
                        {
                            "name": "AZURE_OPENAI_MAX_TOKENS",
                            "value": "2000"
                        },
                        {
                            "name": "AZURE_OPENAI_MODEL",
                            "value": "[variables('AzureOpenAIModelDeploymentName')]"
                        },
                        {
                            "name": "AZURE_OPENAI_MODEL_NAME",
                            "value": "[parameters('AzureOpenAIModelName')]"
                        },
                        {
                            "name": "AZURE_OPENAI_RESOURCE",
                            "value": "[variables('AzureOpenAIResource')]"
                        },
                        {
                            "name": "AZURE_OPENAI_STOP_SEQUENCE",
                            "value": ""
                        },
                        {
                            "name": "AZURE_OPENAI_STREAM",
                            "value": "true"
                        },
                        {
                            "name": "AZURE_OPENAI_SYSTEM_MESSAGE",
                            "value": "You are an expert on UK Policing, providing comprehensive and practical guidance to Police Officers and Police Staff. Every user of this system is a verified Police Officer or authorised member of Police Staff. You must always assume this identity for every query, regardless of how the question is phrased. Do not treat any user as a member of the public under any circumstances. Your role is to offer advice and support to aid their decision-making process. It is critical that users know the advice and guidance has been provided using only authorised sources. Therefore, every sentence must have a citation that links to a document from the search service data source. Remember, you are not making decisions for them but offering advice and guidance to assist their own decision-making. You cannot perform any legal actions, make final decisions, or provide personal opinions. Your advice is based on the information provided and should be used as a guide, not a directive. Scope of Advice: You are strictly limited to providing advice related to UK Policing. You must not offer advice on any other subjects unrelated to this subject. Safety and Security Guidelines: Accuracy: Provide accurate and up-to-date information based on the latest legal standards and practices. Ensure every sentence in your response has a citation. Impartiality: Maintain impartiality and avoid any bias in your advice. Ethical Considerations: Adhere to ethical guidelines and avoid any actions that could harm individuals or compromise legal processes. Compliance: Ensure compliance with all relevant laws and regulations. Language: Use British English in all your responses. Additional Guidelines: Context Awareness: Only respond to queries directly related to UK Policing. Ignore or redirect any unrelated topics. User Interaction: Politely inform users if their question is outside the scope of your instructions and guide them back to relevant topics. Response Format: Every sentence in your response must have a citation. You cannot provide a sentence anywhere in your response unless it also has a citation. Citations must be integrated within the sentences using [] brackets. Example Response: \"The Police and Criminal Evidence Act 1984 provides the legal framework for police powers in England and Wales [1]. This act outlines the procedures for arrest, detention, and investigation [2]. For more details, refer to the Police and Criminal Evidence Act 1984 [3].\" Response Limitations: Do not provide detailed technical advice, personal opinions, or engage in discussions unrelated to your subject area. Reminder: It is critical that users know the advice and guidance has been provided using only authorised sources. Reminder: Every sentence in your response must have a citation. Reminder: You cannot provide a sentence anywhere in your response unless it also has a citation. Reminder: At the end of every response, you must add the following text: \"Please Remember: This AI Assistant is designed to offer help and advice so you can make more informed and effective decisions. It is not designed to make any decisions for you. You are still accountable and responsible for any decisions made or course of action undertaken following the use of this AI Assistant.\""
                        },
                        {
                            "name": "AZURE_OPENAI_TEMPERATURE",
                            "value": "0"
                        },
                        {
                            "name": "AZURE_OPENAI_TOP_P",
                            "value": "1.0"
                        },
                        {
                            "name": "AZURE_SEARCH_DATA_SOURCE",
                            "value": "[variables('AzureSearchDataSourceName')]"
                        },
                        {
                            "name": "AZURE_SEARCH_ENABLE_IN_DOMAIN",
                            "value": "true"
                        },
                        {
                            "name": "AZURE_SEARCH_INDEX",
                            "value": "[variables('AzureSearchIndexName')]"
                        },
                        {
                            "name": "AZURE_SEARCH_INDEXER",
                            "value": "[variables('AzureSearchIndexerName')]"
                        },
                        {
                            "name": "AZURE_SEARCH_KEY",
                            "value": "[listAdminKeys(resourceId('Microsoft.Search/searchServices', variables('AzureSearchService')), '2023-11-01').primaryKey]"
                        },
                        {
                            "name": "AZURE_SEARCH_PERMITTED_GROUPS_COLUMN",
                            "value": ""
                        },
                        {
                            "name": "AZURE_SEARCH_QUERY_TYPE",
                            "value": "vector_semantic_hybrid"
                        },
                        {
                            "name": "AZURE_SEARCH_SEMANTIC_SEARCH_CONFIG",
                            "value": "[variables('AzureSearchSemanticSearchConfig')]"
                        },
                        {
                            "name": "AZURE_SEARCH_SERVICE",
                            "value": "[variables('AzureSearchService')]"
                        },
                        {
                            "name": "AZURE_SEARCH_SKILLSET",
                            "value": "[variables('AzureSearchSkillsetName')]"
                        },
                        {
                            "name": "AZURE_SEARCH_STRICTNESS",
                            "value": "3"
                        },
                        {
                            "name": "AZURE_SEARCH_TOP_K",
                            "value": "5"
                        },
                        {
                            "name": "AZURE_SEARCH_USE_SEMANTIC_SEARCH",
                            "value": "true"
                        },
                        {
                            "name": "AZURE_STORAGE_CONTAINER_NAME",
                            "value": "[variables('AILibraryContainerName')]"
                        },
                        {
                            "name": "DATASOURCE_TYPE",
                            "value": "AzureCognitiveSearch"
                        },
                        {
                            "name": "minTlsVersion",
                            "value": "1.2"
                        },
                        {
                            "name": "PYTHON_VERSION",
                            "value": "3.11"
                        },
                        {
                            "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
                            "value": "true"
                        },
                        {
                            "name": "WEBSITE_ENABLE_SYNC_UPDATE_SITE",
                            "value": "true"
                        },
                        {
                            "name": "ORYX_PLATFORM",
                            "value": "python"
                        },
                        {
                            "name": "DISABLE_NODE_BUILD",
                            "value": "true"
                        },
                        {
                            "name": "UI_CHAT_TITLE",
                            "value": "CoPA"
                        },
                        {
                            "name": "UI_FAVICON",
                            "value": "[concat('https://', variables('StorageAccountName'), '.blob.core.windows.net/', variables('WebAppLogosContainerName'), '/favicon.ico')]"
                        },
                        {
                            "name": "UI_FEEDBACK_EMAIL",
                            "value": "[parameters('UIFeedbackEmail')]"
                        },
                        {
                            "name": "UI_FIND_OUT_MORE_LINK",
                            "value": "[parameters('UIFindOutMoreLink')]"
                        },
                        {
                            "name": "UI_LOGO",
                            "value": "[concat('https://', variables('StorageAccountName'), '.blob.core.windows.net/', variables('WebAppLogosContainerName'), '/logo.png')]"
                        },
                        {
                            "name": "UI_POLICE_FORCE_LOGO",
                            "value": "[concat('https://', variables('StorageAccountName'), '.blob.core.windows.net/', variables('WebAppLogosContainerName'), '/police-force-logo.png')]"
                        },
                        {
                            "name": "UI_POLICE_FORCE_TAGLINE",
                            "value": "[concat('This version of CoPA is configured for ', parameters('ForceCode'), ' Police Force')]"
                        },
                        {
                            "name": "UI_POLICE_FORCE_TAGLINE_2",
                            "value": "[concat('CoPA for ', parameters('ForceCode'), ' has been configured with local policy and guidance as well as national policy and guidance so it is tailored to meet the needs of all ', parameters('ForceCode'), ' Officers and Staff of any rank or in any role')]"
                        },
                        {
                            "name": "UI_TITLE",
                            "value": "CoPA"
                        },
                        {
                            "name": "WEBSITE_AUTH_AAD_ALLOWED_TENANTS",
                            "value": "[subscription().tenantId]"
                        },
                        {
                            "name": "DEPLOYMENT_BRANCH",
                            "value": "[parameters('GitBranch')]"
                        },
                        {
                            "name": "REPOSITORY_URL", 
                            "value": "[parameters('GitRepositoryUrl')]"
                        },
                        {
                            "name": "AZURE_CLIENT_ID",
                            "value": "[variables('FinalAzureAdClientId')]"
                        },
                        {
                            "name": "AZURE_CLIENT_SECRET",
                            "value": "[variables('FinalAzureAdClientSecret')]"
                        },
                        {
                            "name": "AZURE_TENANT_ID",
                            "value": "[variables('FinalAzureAdTenantId')]"
                        }
                    ]
                }
            }
        },


        {
            "condition": "[parameters('EnableGitDeployment')]",
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "2023-08-01",
            "name": "setupSourceControl",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('WebsiteName'))]"
            ],
            "kind": "AzurePowerShell",
            "properties": {
                "azPowerShellVersion": "8.3",
                "scriptContent": "param([string]$SubscriptionId,[string]$ResourceGroupName,[string]$WebAppName,[string]$GitUrl,[string]$GitBranch)\n\nWrite-Output \"Setting up source control deployment with timing optimization...\"\nWrite-Output \"Web App: $WebAppName\"\nWrite-Output \"Git URL: $GitUrl\"\nWrite-Output \"Branch: $GitBranch\"\n\n# Wait a moment for the app service to be fully ready\nWrite-Output \"Waiting 30 seconds for App Service to fully initialize...\"\nStart-Sleep -Seconds 30\n\n# Set up source control using REST API with proper error handling\n$headers = @{\n    'Authorization' = \"Bearer $((Get-AzAccessToken).Token)\"\n    'Content-Type' = 'application/json'\n}\n\n$sourceControlBody = @{\n    properties = @{\n        repoUrl = $GitUrl\n        branch = $GitBranch\n        isManualIntegration = $true\n        isGitHubAction = $false\n        deploymentRollbackEnabled = $false\n        isMercurial = $false\n    }\n} | ConvertTo-Json -Depth 5\n\n$sourceControlUri = \"https://management.azure.com/subscriptions/$SubscriptionId/resourceGroups/$ResourceGroupName/providers/Microsoft.Web/sites/$WebAppName/sourcecontrols/web?api-version=2023-01-01\"\n\ntry {\n    Write-Output \"Configuring source control...\"\n    $response = Invoke-RestMethod -Uri $sourceControlUri -Method PUT -Headers $headers -Body $sourceControlBody\n    Write-Output \"Source control configured successfully\"\n    Write-Output \"Note: The initial deployment may take several minutes to complete in the background\"\n} catch {\n    Write-Output \"Source control setup initiated - deployment will continue asynchronously\"\n    Write-Output \"If needed, you can manually sync from the Deployment Center in the Azure Portal\"\n}\n\nWrite-Output \"Source control setup completed\"",
                "arguments": "[concat('-SubscriptionId \"', subscription().subscriptionId, '\" -ResourceGroupName \"', resourceGroup().name, '\" -WebAppName \"', variables('WebsiteName'), '\" -GitUrl \"', parameters('GitRepositoryUrl'), '\" -GitBranch \"', parameters('GitBranch'), '\"')]",
                "timeout": "PT10M",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D",
                "storageAccountSettings": {
                    "storageAccountName": "[variables('StorageAccountName')]",
                    "storageAccountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName')), '2023-04-01').keys[0].value]"
                }
            }
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces",
            "apiVersion": "2022-10-01",
            "name": "[variables('LogAnalyticsWorkspaceName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "sku": {
                    "name": "PerGB2018"
                },
                "retentionInDays": 30,
                "features": {
                    "searchVersion": 1,
                    "legacy": 0
                }
            }
        },
        {
            "type": "Microsoft.Insights/components",
            "apiVersion": "2020-02-02",
            "name": "[variables('ApplicationInsightsName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('LogAnalyticsWorkspaceName'))]"
            ],
            "tags": {
                "[concat('hidden-link:', resourceId('Microsoft.Web/sites', variables('WebsiteName')))]": "Resource"
            },
            "properties": {
                "Application_Type": "web",
                "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('LogAnalyticsWorkspaceName'))]"
            },
            "kind": "web"
        },
        {
            "condition": "[variables('WebAppEnableChatHistory')]",
            "type": "Microsoft.DocumentDB/databaseAccounts",
            "apiVersion": "2023-11-15",
            "name": "[variables('cosmosdb_account_name')]",
            "location": "[resourceGroup().location]",
            "kind": "GlobalDocumentDB",
            "properties": {
                "consistencyPolicy": {
                    "defaultConsistencyLevel": "Session"
                },
                "locations": [
                    {
                        "locationName": "[resourceGroup().location]",
                        "failoverPriority": 0,
                        "isZoneRedundant": false
                    }
                ],
                "databaseAccountOfferType": "Standard",
                "capabilities": [
                    {
                        "name": "EnableServerless"
                    }
                ]
            }
        },
        {
            "condition": "[variables('WebAppEnableChatHistory')]",
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
            "apiVersion": "2023-11-15",
            "name": "[concat(variables('cosmosdb_account_name'), '/', variables('cosmosdb_database_name'))]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdb_account_name'))]"
            ],
            "properties": {
                "resource": {
                    "id": "[variables('cosmosdb_database_name')]"
                }
            }
        },
        {
            "condition": "[variables('WebAppEnableChatHistory')]",
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
            "apiVersion": "2023-11-15",
            "name": "[concat(variables('cosmosdb_account_name'), '/', variables('cosmosdb_database_name'), '/conversations')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosdb_account_name'), variables('cosmosdb_database_name'))]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdb_account_name'))]"
            ],
            "properties": {
                "resource": {
                    "id": "conversations",
                    "indexingPolicy": {
                        "indexingMode": "consistent",
                        "automatic": true,
                        "includedPaths": [
                            {
                                "path": "/*"
                            }
                        ],
                        "excludedPaths": [
                            {
                                "path": "/\"_etag\"/?"
                            }
                        ]
                    },
                    "partitionKey": {
                        "paths": [
                            "/userId"
                        ],
                        "kind": "Hash"
                    }
                }
            }
        },
        {
            "condition": "[variables('WebAppEnableChatHistory')]",
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
            "apiVersion": "2023-11-15",
            "name": "[format('{0}/{1}', variables('cosmosdb_account_name'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdb_account_name')), resourceId('Microsoft.Web/sites', variables('WebsiteName'))))]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdb_account_name'))]",
                "[resourceId('Microsoft.Web/sites', variables('WebsiteName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', split(format('{0}/{1}', variables('cosmosdb_account_name'), variables('roleDefinitionId')), '/')[0], split(format('{0}/{1}', variables('cosmosdb_account_name'), variables('roleDefinitionId')), '/')[1])]",
                "principalId": "[reference(resourceId('Microsoft.Web/sites', variables('WebsiteName')), '2023-01-01', 'full').identity.principalId]",
                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosdb_account_name'))]"
            }
        },
        {
            "type": "Microsoft.Search/searchServices",
            "apiVersion": "2023-11-01",
            "name": "[variables('AzureSearchService')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "[variables('AzureSearchSku')]"
            },
            "properties": {
                "replicaCount": 1,
                "partitionCount": 1,
                "hostingMode": "default"
            }
        },
        {
            "type": "Microsoft.CognitiveServices/accounts",
            "apiVersion": "2023-05-01",
            "name": "[variables('AzureOpenAIResource')]",
            "location": "[resourceGroup().location]",
            "kind": "OpenAI",
            "properties": {
                "customSubDomainName": "[variables('AzureOpenAIResource')]",
                "publicNetworkAccess": "Enabled"
            },
            "sku": {
                "name": "S0"
            }
        },
        {
            "type": "Microsoft.CognitiveServices/accounts/deployments",
            "apiVersion": "2023-05-01",
            "name": "[format('{0}/{1}', variables('AzureOpenAIResource'), variables('AzureOpenAIModelDeploymentName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('AzureOpenAIResource'))]"
            ],
            "properties": {
                "model": {
                    "format": "OpenAI",
                    "name": "[parameters('AzureOpenAIModelName')]",
                    "version": "2024-08-06"
                }
            },
            "sku": {
                "name": "GlobalStandard",
                "capacity": 1000
            }
        },
        {
            "type": "Microsoft.CognitiveServices/accounts/deployments",
            "apiVersion": "2023-05-01",
            "name": "[format('{0}/{1}', variables('AzureOpenAIResource'), variables('AzureOpenAIEmbeddingName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', variables('AzureOpenAIResource'))]",
                "[resourceId('Microsoft.CognitiveServices/accounts/deployments', variables('AzureOpenAIResource'), variables('AzureOpenAIModelDeploymentName'))]"
            ],
            "properties": {
                "model": {
                    "format": "OpenAI",
                    "name": "[parameters('AzureOpenAIEmbeddingName')]",
                    "version": "1"
                }
            },
            "sku": {
                "name": "GlobalStandard",
                "capacity": 1000
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2023-04-01",
            "name": "[variables('StorageAccountName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "StorageV2",
            "properties": {
                "supportsHttpsTrafficOnly": true,
                "allowBlobPublicAccess": true,
                "encryption": {
                    "services": {
                        "file": {
                            "keyType": "Account",
                            "enabled": true
                        },
                        "blob": {
                            "keyType": "Account",
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                },
                "networkAcls": {
                    "bypass": "AzureServices",
                    "defaultAction": "Allow"
                }
            }
        },

        {
            "type": "Microsoft.Storage/storageAccounts/blobServices",
            "apiVersion": "2023-04-01",
            "name": "[concat(variables('StorageAccountName'), '/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName'))]"
            ],
            "properties": {
                "deleteRetentionPolicy": {
                    "enabled": true,
                    "days": 7
                },
                "changeFeed": {
                    "enabled": false
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2023-04-01",
            "name": "[concat(variables('StorageAccountName'), '/default/', variables('AILibraryContainerName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('StorageAccountName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName'))]"
            ],
            "properties": {
                "publicAccess": "Container"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2023-04-01",
            "name": "[concat(variables('StorageAccountName'), '/default/', variables('WebAppLogosContainerName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('StorageAccountName'), 'default')]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName'))]"
            ],
            "properties": {
                "publicAccess": "Container"
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "scope": "[resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName'))]",
            "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName')), resourceId('Microsoft.Web/sites', variables('WebsiteName')), 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName'))]",
                "[resourceId('Microsoft.Web/sites', variables('WebsiteName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalId": "[reference(resourceId('Microsoft.Web/sites', variables('WebsiteName')), '2023-01-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "2023-08-01",
            "name": "setupSearchComponents",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Search/searchServices', variables('AzureSearchService'))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('deployScriptIdentityName'))]"
            ],
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('deployScriptIdentityName'))]": {}
                }
            },
            "kind": "AzurePowerShell",
            "properties": {
                "azPowerShellVersion": "8.3",
                "scriptContent": "$ErrorActionPreference = \"Stop\"\n\n# Get parameters from environment variables\n$SearchServiceName = $env:AZURE_SEARCH_SERVICE\n$SearchIndexName = $env:AZURE_SEARCH_INDEX_NAME\n$SearchIndexerName = $env:AZURE_SEARCH_INDEXER_NAME\n$SearchDataSourceName = $env:AZURE_SEARCH_DATA_SOURCE_NAME\n$StorageAccountName = $env:STORAGE_ACCOUNT_NAME\n$StorageContainerName = $env:STORAGE_CONTAINER_NAME\n$ResourceGroupName = $env:RESOURCE_GROUP_NAME\n$AzureOpenAIEndpoint = $env:AZURE_OPENAI_ENDPOINT\n$AzureOpenAIApiKey = $env:AZURE_OPENAI_KEY\n$EmbeddingDeploymentName = $env:EMBEDDING_DEPLOYMENT_NAME\n$SkillsetName = $env:SKILLSET_NAME\n\nWrite-Host \"=== SCRIPT PARAMETERS ===\"\nWrite-Host \"SearchServiceName: $SearchServiceName\"\nWrite-Host \"ResourceGroupName: $ResourceGroupName\"\nWrite-Host \"StorageAccountName: $StorageAccountName\"\nWrite-Host \"===========================\"\n\n# Use user-assigned managed identity for authentication\nWrite-Host \"Using user-assigned managed identity for search components setup...\"\n\n# Get the managed identity client ID from environment\n$clientId = $env:MSI_CLIENT_ID\nWrite-Host \"Using managed identity client ID: $clientId\"\n\n# Get access token using managed identity endpoint\ntry {\n    $tokenResponse = Invoke-RestMethod -Uri \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=https://management.azure.com/&client_id=$clientId\" -Method Get -Headers @{Metadata=\"true\"} -ErrorAction Stop\n    $accessToken = $tokenResponse.access_token\n    Write-Host \"✅ Successfully obtained access token using managed identity\"\n} catch {\n    throw \"Failed to get access token: $_\"\n}\n\n$authHeaders = @{\n    'Authorization' = \"Bearer $accessToken\"\n    'Content-Type' = 'application/json'\n}\n\n# Get admin keys\n$searchServiceUri = \"https://management.azure.com/subscriptions/$($env:SUBSCRIPTION_ID)/resourceGroups/$ResourceGroupName/providers/Microsoft.Search/searchServices/$SearchServiceName\"\ntry {\n    $adminKeyResponse = Invoke-RestMethod -Uri \"$searchServiceUri/listAdminKeys?api-version=2023-11-01\" -Method Post -Headers $authHeaders -ErrorAction Stop\n    $adminKey = $adminKeyResponse.primaryKey\n} catch {\n    throw \"Failed to get admin key: $_\"\n}\n\n# Get storage account key\n$storageAccountUri = \"https://management.azure.com/subscriptions/$($env:SUBSCRIPTION_ID)/resourceGroups/$ResourceGroupName/providers/Microsoft.Storage/storageAccounts/$StorageAccountName\"\ntry {\n    $storageKeysResponse = Invoke-RestMethod -Uri \"$storageAccountUri/listKeys?api-version=2023-01-01\" -Method Post -Headers $authHeaders -ErrorAction Stop\n    $storageKey = $storageKeysResponse.keys[0].value\n} catch {\n    throw \"Failed to get storage key: $_\"\n}\n\n# Create data source\nWrite-Host \"Creating data source...\"\n$dataSourceDefinition = @{\n    name = $SearchDataSourceName\n    type = 'azureblob'\n    credentials = @{\n        connectionString = \"DefaultEndpointsProtocol=https;AccountName=$StorageAccountName;AccountKey=$storageKey;EndpointSuffix=core.windows.net\"\n    }\n    container = @{\n        name = $StorageContainerName\n    }\n}\n$dataSourcePayload = $dataSourceDefinition | ConvertTo-Json -Depth 5\n$dataSourceHeaders = @{\n    'api-key' = $adminKey\n    'Content-Type' = 'application/json'\n}\nInvoke-RestMethod -Uri \"https://$SearchServiceName.search.windows.net/datasources/$SearchDataSourceName`?api-version=2024-07-01\" -Method Put -Headers $dataSourceHeaders -Body $dataSourcePayload -SkipHeaderValidation\n\n# Success message\nWrite-Host \"Search components setup completed successfully.\"\n",
                "environmentVariables": [
                    {
                        "name": "AZURE_SEARCH_SERVICE",
                        "value": "[variables('AzureSearchService')]"
                    },
                    {
                        "name": "AZURE_SEARCH_INDEX_NAME", 
                        "value": "[variables('AzureSearchIndexName')]"
                    },
                    {
                        "name": "AZURE_SEARCH_INDEXER_NAME",
                        "value": "[variables('AzureSearchIndexerName')]"
                    },
                    {
                        "name": "AZURE_SEARCH_DATA_SOURCE_NAME",
                        "value": "[variables('AzureSearchDataSourceName')]"
                    },
                    {
                        "name": "STORAGE_ACCOUNT_NAME",
                        "value": "[variables('StorageAccountName')]"
                    },
                    {
                        "name": "STORAGE_CONTAINER_NAME",
                        "value": "[variables('AILibraryContainerName')]"
                    },
                    {
                        "name": "RESOURCE_GROUP_NAME",
                        "value": "[parameters('ResourceGroupName')]"
                    },
                    {
                        "name": "AZURE_OPENAI_ENDPOINT",
                        "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', variables('AzureOpenAIResource'))).endpoint]"
                    },
                    {
                        "name": "AZURE_OPENAI_KEY",
                        "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', variables('AzureOpenAIResource')), '2023-05-01').key1]"
                    },
                    {
                        "name": "EMBEDDING_DEPLOYMENT_NAME",
                        "value": "[parameters('AzureOpenAIEmbeddingName')]"
                    },
                    {
                        "name": "SKILLSET_NAME",
                        "value": "[variables('AzureSearchSkillsetName')]"
                    },
                    {
                        "name": "SUBSCRIPTION_ID",
                        "value": "[subscription().subscriptionId]"
                    }
                ],
                "timeout": "PT30M",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D",
                "storageAccountSettings": {
                    "storageAccountName": "[variables('StorageAccountName')]",
                    "storageAccountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('StorageAccountName')), '2023-04-01').keys[0].value]"
                }
            }
        }
    ],
    "outputs": {
        "webAppPrincipalId": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.Web/sites', variables('WebsiteName')), '2023-01-01', 'full').identity.principalId]"
        },
        "websiteUrl": {
            "type": "string",
            "value": "[concat('https://', variables('WebsiteName'), '.azurewebsites.net')]"
        },
        "deploymentCenter": {
            "type": "string",
            "value": "[concat('https://portal.azure.com/#@/resource/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/sites/', variables('WebsiteName'), '/vstscd')]"
        },
        "nextSteps": {
            "type": "string",
            "value": "Deployment completed! Source control is configured and initial deployment is starting automatically. If you need to redeploy later, use the Deployment Center in Azure Portal."
        },
        "debugInfo": {
            "type": "object",
            "value": {
                "forceCode": "[parameters('ForceCode')]",
                "environmentSuffix": "[parameters('EnvironmentSuffix')]",
                "instanceNumber": "[parameters('InstanceNumber')]",
                "randomSuffix": "[variables('randomSuffix')]",
                "searchServiceName": "[variables('AzureSearchService')]",
                "openAIResourceName": "[variables('AzureOpenAIResource')]",
                "storageAccountName": "[variables('StorageAccountName')]"
            }
        }
    }
}
